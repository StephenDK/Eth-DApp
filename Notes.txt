What is a Transaction?

Format of the transaction object on Ethereum:

Nonce(Nonsense): How many times the sender has sent a transaction.
To: Address of account this money is going to.
Value: Amount of ether to send to the target account.
GasPrice: Amount of ether the sender is willing to pay per unit gas to get this transaction processed.
StartGas/gasLimit: Unit of gas that this transaction can consume.
V, R, S: Cryptographic pieces of data that can be used to generate the senders account address. It is generated from the sender's private key.


Workflow:

"Submit" -> 
Address sent to backend server ->
Server using web3 library creates "transaction" object ->
Backend server send "Transaction" to Rinkeby test network -> 
Backend waits for transaction confirm -> 
Backend sends success message to browser

What is a smart contract?
A smart contract is an account controlled by code.

Properties of a Smart Contract Account:
Balance: Amount of Ether this account owns.
Storage: Data storage for this contract.
Code: Raw machine code for this contract.

External Account: An account that you or I or anybody owns. They are decoupled from any individual network.

Contract Accounts: Accounts that are specific to one network like Rinkeby, Ropsten, or Mainnet. These accounts cannot be accessed from other network accounts.

Solidity: 
Written in .sol files.
Strongly Typed - A language is strongly typed if type errors are always detected.
Similar to Javascript.
Has several huge, gigantic 'gotchas'.

Solidity Workflow:
Contract Definition ->
Solidity Compiler ->
	-> Byte code ready for deployment
	-> Application Binary Interface (ABI)

Writing our First Contract Instructions:
1. Load Remix in your browser by visiting this link: https://remix.ethereum.org/

2. Click the contracts directory in the default_workspace

3. Open the 3_Ballot.sol file and delete all of the code within it.

4. Click the icon "S" icon in the left sidebar and then change the COMPILER version to 0.4.17+commit.bdeb9e52 to match the lecture videos.

5. Find the COMPILER CONFIGURATION section and tick the Auto compile box. With this option enabled, Remix will compile the contract automatically.

6. You should now be all caught to begin writing your contract code as shown in the lecture video.

Our First Contract:
-----------------START OF CODE----------------------------

pragma solidity ^0.4.17; // Specifies the Version of Solidity

// Our first contract
// Defines our first contract (Remember Classes!) that will have some number of methods and variables
contract Inbox {
    // Create a new variable in the Inbox contract
    // Type = string, public=accessible by everyone
    // This public varaible will be stored on the blockchain
    string public message;


    // Associated Contract functions that are members of this class contract
    // Below is the constructor function for this class
    function Inbox(string initialMessage) public {
        message = initialMessage;
    }
    function setMessage(string newMessage) public {
        message = newMessage;
    }
    //  Function syntax below
    //  Function Name;  Function Type; Return Types;   
    function getMessage() public view returns (string) {
        return message;
    }
}


-------------END OF CODE-------------------------------

Common Function Types
public: Anyone can call this function // Can only use once per function
private: Only this contract can call this function // Can only use once per function
view: This function returns data and does not modify the contract's data
constant: This function returns data and does not modify the contract's data
pure: Function will not modify or even read the contract's data
playable: When someone calls this function they might send ether along.

Deploying our Contract:
1. Click the Ethereum Icon in the left sidebar

2. Enter a string in the Contract field and click deploy

3. To expose the function of the newly deployed contract, click the down arrow under Deployed Contracts

Remix.Ethereum Workflow:
The remix editor takes or code and compiles it into bytecode. It then deploys the source code onto a fake in-browser ethereum network for testing.

Remix Compile Options
Environment: Use the Remix VM(London) This is AKA Javascript VM
Account: Upon starting the inbrowser Ethereum machine we get a series of accounts to work with.
Gas Limit: 
Value: Used to make a transaction and sends along the value of ether you wnat to send.

**IMPORTANT NOTE** - Whenever we define a variable and mark it with the public keyword then the contract automatically creates a new function with the same name as the function. Calling the function returns the variable itself. getMessage in the code above does the same thing.

Redeploying Contracts:
Change in Code
----------------------------------------
pragma solidity ^0.4.17; // Specifies the Version of Solidity

// Our first contract
// Defines our first contract (Remember Classes!) that will have some number of methods and variables
contract Inbox {
    // Create a new variable in the Inbox contract
    // Type = string, public=accessible by everyone
    // This public varaible will be stored on the blockchain
    string public message;


    // Associated Contract functions that are members of this class contract
    // Below is the constructor function for this class
    function Inbox(string initialMessage) public {
        message = initialMessage;
    }
    function setMessage(string newMessage) public {
        message = newMessage;
    }
}

--------------------------------------------
When making a change to the code, make sure to redeploy the contract. Delete the contract instance by pressing the "x" and then redeploy. Once completed, place another value in initialMessage and create contract.

Behind the Scenes of Deployment(Video)
External Account to Create Contact Transaction Object

Nonce(Nonsense): How many times the sender has sent a transaction.
To: **SUPER IMPORTANT** The difference betweeen a trasaction and a contract creation trasaction is that there is no "to" property.
Data: Compiled bytecode of the contract.
Value: Amount of "Wei" to send to the target account.
GasPrice: Amount of "Wei" the sender is willing to pay per unit gas to get this transaction processed.
StartGas/gasLimit: Unit of gas that this transaction can consume.
V, R, S: Cryptographic pieces of data that can be used to generate the senders account address. It is generated from the sender's private key.

More On Running Functions Than you Want to Know
Any time we want to update any data on the blockchain we need to submit a transaction. We also have to wait for the POW/POS to be proved.

Important to note that getMessage does not trigger any changes on the blockchain while setMessage triggers a change on the blockchain.

There are two way to invoke functions that belong to our contracts. These two way result in two different behaviors.

The first way we can call a function is "Calling a Function"

1. Running Contract Functions
Cannot modify the contracts data
Can return data
Runs instantly
Free to do

The second is "Sending a transaction as a function"

2. Sending a transaction to a function
Can modify a contracts data
*Takes time to execute!
*Returns the transaction hash
*Cost money

MOST IMPORTANTLY - Transactions are not instantaniously done on the network. Most examples will use remix where transactions are done almostly instantly.

Wei VS Ether:
Gas: wei, gwei, finney, and ether are all measurments of the same thing.
1 ether = 1,000,000,000,000,000,000 Wei
Wei is a very small unit of Ehter 	

Gas and Transactions:
To get someone to run our contract we need to pay them money

Google speadsheet of Gas prices depending on operations
https://docs.google.com/spreadsheets/d/1n6mRqkBz3iWcOlRem_mO09GtSKEKrAsfO7Frgx18pNU/edit#gid=0

GasPrice: Amount of Wei the sender is willing to pay per unit gas to get this transaction processed.
startGas/gasLimit: Units of gas that this transaction can consume.

*GAS EQUATION*
Variables:
gasPrice = 300
Used gas = 14

Total Cost = 300 wei/gas * 14 gas = 4,200 wei

--NEW CODE--
pragma solidity ^0.4.17; // Specifies the Version of Solidity

// Our first contract
// Defines our first contract (Remember Classes!) that will have some number of methods and variables
contract Inbox {
    // Create a new variable in the Inbox contract
    // Type = string, public=accessible by everyone
    // This public varaible will be stored on the blockchain
    string public message;


    // Associated Contract functions that are members of this class contract
    // Below is the constructor function for this class
    function Inbox(string initialMessage) public {
        message = initialMessage;
    }
    function setMessage(string newMessage) public {
        message = newMessage;
    }
    function doMath(int a, int b) {
        a + b;  // Costs 3 gas
        b - a;  // Costs 3 gas
        a * b;  // Costs 5 gas
        a == 0; // Costs 3 gas
        // Total Gas Needed: 14
    }
}

MNEMONIC PHRASES:
A 12 word mnemonic allows us to generate an account with a public key, private key, amd an address.
Using the BIP39 mnemonic algorithm we can generate a series of accounts from 12 words. 

Tool:
https://iancoleman.io/bip39/

This tool will show us how to genertate a mnemonic word set. By entering in your mnemonic 12 words we can see that a series of accounts can be created using your 12 words. When we create a new account in metamask, the account address matches the generated accounts in the tool above in order from top to bottom.

OBAINING MORE TEST ETHER FROM RECOMMENDED FAUCET:
https://goerlifaucet.com/

Use the link above and login using your account. Once logged in you can sent GoerliETH to your account for testing.

